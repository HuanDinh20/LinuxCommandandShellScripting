Welcome to Useful Features of the Bash Shell. After watching this video, you will be able
to outline the following Bash shell-scripting features: Metacharacters Quoting I/O redirection Command substitution Command line arguments Batch vs. concurrent modes of execution Metacharacters are special characters that
have meaning to the shell. The pound symbol is used to include comments,
which are ignored by the shell. For example, this comment does not return
anything. The semicolon is a metacharacter used to separate
commands typed on the same line. For example, these two commands return their
outputs on two lines like this. The asterisk is used to represent any number
of consecutive characters within a filename pattern. For example, this expression returns all objects
in the slash bin directory with name starting with ba and followed by any characters, which
in this case is bash. The question mark acts as a single-character
version of the asterisk metacharacter. For example, this expression lists all objects
in the slash bin directory having a single character in place of the question mark, namely
the bash and dash paths. Quoting is used to specify whether the shell
should interpret special characters as metacharacters, or ‘escape’ them. You can use the backslash to escape interpretation
of a single character as a metacharacter. Here, the backslash tells Bash to interpret
the dollar sign as text, rather than the default of variable name, so the output is literally
‘dollar one each.’ Double quotes will interpret text literally,
except for any metacharacters, which will be interpreted according to their special
meanings. For example, the ‘dollar one’ expression,
without the preceding backslash, is interpreted as a variable, which in this case is empty,
as we see here. Notice that it printed the space before “each.” Single quotes, on the other hand, are used
to interpret all contents as literal characters. For example, this expression returns the same
result as the first example above. Input/Output, or ‘I’ ‘O’ redirection
refers to a set of features used for redirecting either the standard input, which is the keyboard,
or the standard output, which is the terminal. The ‘>’ symbol is used to redirect standard
output of a command to a file. It also creates the file if it doesn't exist,
and overwrites its contents if it already exists. You can avoid overwriting by using the double
greater than symbol, which appends output to any existing content. The combination ‘2>’ redirects an error
message to a file. To append the error message, for example,
to an error log file, just add another greater than sign. Lastly, the less than sign is a redirection
which is used to pass file contents as input to the standard input. Let's look at a few examples. You can start by simultaneously creating a
file and populating it with some text, like this. You can then cat the file to see what's there.
As you can see, ‘line1’ was written to ‘eg.txt’. Now, you can try adding another line to
the file. Viewing the contents again, you can see that
the file contains exactly the two lines you added. Entering something like the word garbage returns
an error. This expression catches the error message
and redirects it to the file ‘err.txt’. Indeed, the content of ‘err.txt’ is
what can be expected. You can use command substitution when you
want to replace a command with its output. There are two equivalent notations: in the
first, the command is encapsulated by parentheses with a dollar sign out front, while in the
second, the command is encapsulated within backticks, also known as backquotes. Let's say you want to store the current directory
path in a variable called 'here'. You can use command substitution on the pwd
(or present working directory) command, to capture its output and assign it to the variable
‘here.’ Indeed, echoing its value returns the current
directory. Command line arguments are arguments used
by a program that are specified on the command line. In particular, they provide a way to pass
arguments to a shell script, which is itself a program. Command line arguments for a Bash script are
specified like this: Here, the arguments ‘arg1’ and ‘arg2’
are passed to ‘MyBashScript.sh’. Bash has two main modes of operation: Batch mode, which is the usual mode, runs
commands sequentially. For example, these two commands, separated
by the semicolon metacharacter, will be executed in a particular order. Command 2 only runs
after command 1 is completed. In concurrent mode, commands run in parallel. The ampersand operator after command 1 directs
command 1 to operate in the background and passes control to command 2 in the foreground. In this video, you learned that: Metacharacters are special characters that
have meaning to the shell. Quoting is used to specify whether the shell
should interpret special characters as metacharacters, or 'escape' them. Input/Output, or I/O redirection, refers to
a set of features used for redirecting. You can use command substitution when you
want to replace a command with its output. Command line arguments provide a way to pass
arguments to a shell script. In concurrent mode, multiple commands can
run simultaneously.